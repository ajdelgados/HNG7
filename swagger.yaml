swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "MyCustomer API"
host: "customerpay.me"
basePath: "/v1"
tags:
- name: "Customer"
  description: "Everything about Customer"
- name: "Store"
  description: "Everything about Store"
- name: "User"
  description: "Everything about User"
schemes:
- "https"
paths:
  /customer:
    post:
      tags:
      - "Customer"
      summary: "Add a new customer to the store"
      description: ""
      operationId: "addCustomer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Customer object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Customer"
        "405":
          description: "Invalid input"
    put:
      tags:
      - "Customer"
      summary: "Update an existing customer"
      description: ""
      operationId: "updateCustomer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Customer object that needs to be updated to the store"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Customer"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Customer not found"
        "405":
          description: "Validation exception"
  /customer/{customerId}:
    get:
      tags:
      - "Customer"
      summary: "Find customer by ID"
      description: "Returns a single customer"
      operationId: "getCustomerById"
      produces:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "ID of customer to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Customer"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Customer not found"
    delete:
      tags:
      - "Customer"
      summary: "Deletes a customer"
      description: ""
      operationId: "deleteCustomer"
      produces:
      - "application/json"
      parameters:
      - name: "customerId"
        in: "path"
        description: "Customer id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Customer not found"
  /customers/{storeId}:
    get:
      tags:
      - "Customer"
      summary: "List of customers"
      description: ""
      operationId: "getCustomers"
      produces:
      - "application/json"
      parameters:
      - name: "storeId"
        in: "path"
        description: "ID of store to return a list of customers"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
           type: "array"
           items:
            $ref: "#/definitions/Customer"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Customer not found"
  /store:
    post:
      tags:
      - "Store"
      summary: "Add a new store to the user"
      description: "User object that needs to be created"
      operationId: "addStore"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Store object"
        required: true
        schema:
          $ref: "#/definitions/Store"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Store"
        "405":
          description: "Invalid input"
    put:
      tags:
      - "Store"
      summary: "Update an existing Store"
      description: ""
      operationId: "updateStore"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Store object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Store"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Store"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Store not found"
        "405":
          description: "Validation exception"
  /store/{storeId}:
    get:
      tags:
      - "Store"
      summary: "Find store by ID"
      description: "Returns a single store"
      operationId: "getStoreById"
      produces:
      - "application/json"
      parameters:
      - name: "storeId"
        in: "path"
        description: "ID of store to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Store"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Store not found"
    delete:
      tags:
      - "Store"
      summary: "Deletes a store"
      description: ""
      operationId: "deleteStore"
      produces:
      - "application/json"
      parameters:
      - name: "storeId"
        in: "path"
        description: "Store id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Store not found"
  /stores:
    get:
      tags:
      - "Store"
      summary: "List of stores"
      description: ""
      operationId: "getStores"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
           type: "array"
           items:
            $ref: "#/definitions/Store"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Store not found"
  /user:
    post:
      tags:
      - "User"
      summary: "Add a new user to app"
      description: "User object that needs to be created"
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "405":
          description: "Invalid input"
    put:
      tags:
      - "User"
      summary: "Update an existing User"
      description: ""
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
        "405":
          description: "Validation exception"
  /user/{userId}:
    get:
      tags:
      - "User"
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "User"
      summary: "Deletes a User"
      description: ""
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "User id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Customer not found"
  /users:
    get:
      tags:
      - "User"
      summary: "List of users"
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
           type: "array"
           items:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Customer not found"
definitions:
  Customer:
    type: "object"
    required:
    - "name"
    - "phone"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Mikah"
      phone:
        type: "string"
  Store:
    type: "object"
    required:
    - "name"
    - "phone"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      phone:
        type: "string"
      address:
        type: "string"
      tagline:
        type: "string"
  User:
    type: "object"
    required:
    - "name"
    - "lastname"
    - "phone"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Mikah"
      lastname:
        type: "string"
        example: "Mikah"
      phone:
        type: "string"
      email:
        type: "string"
        example: "mikah@domain.com"
externalDocs:
  description: "Find out more about customerpay.me"
  url: "https://customerpay.me"